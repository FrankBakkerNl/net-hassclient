{
    "id": 2,
    "type": "result",
    "success": true,
    "result": {
        "homeassistant": {
            "turn_off": {
                "description": "Generic service to turn devices off under any domain. Same usage as the light.turn_on, switch.turn_on, etc. services.",
                "fields": {
                    "entity_id": {
                        "description": "The entity_id of the device to turn off.",
                        "example": "light.living_room"
                    }
                }
            },
            "turn_on": {
                "description": "Generic service to turn devices on under any domain. Same usage as the light.turn_on, switch.turn_on, etc. services.",
                "fields": {
                    "entity_id": {
                        "description": "The entity_id of the device to turn on.",
                        "example": "light.living_room"
                    }
                }
            },
            "toggle": {
                "description": "Generic service to toggle devices on/off under any domain. Same usage as the light.turn_on, switch.turn_on, etc. services.",
                "fields": {
                    "entity_id": {
                        "description": "The entity_id of the device to toggle on/off.",
                        "example": "light.living_room"
                    }
                }
            },
            "stop": {
                "description": "Stop the Home Assistant service.",
                "fields": {}
            },
            "restart": {
                "description": "Restart the Home Assistant service.",
                "fields": {}
            },
            "check_config": {
                "description": "Check the Home Assistant configuration files for errors. Errors will be displayed in the Home Assistant log.",
                "fields": {}
            },
            "update_entity": {
                "description": "Force one or more entities to update its data",
                "fields": {
                    "entity_id": {
                        "description": "One or multiple entity_ids to update. Can be a list.",
                        "example": "light.living_room"
                    }
                }
            },
            "reload_core_config": {
                "description": "Reload the core configuration.",
                "fields": {}
            },
            "set_location": {
                "description": "Update the Home Assistant location.",
                "fields": {
                    "latitude": {
                        "description": "Latitude of your location",
                        "example": 32.87336
                    },
                    "longitude": {
                        "description": "Longitude of your location",
                        "example": 117.22743
                    }
                }
            }
        },
        "persistent_notification": {
            "create": {
                "description": "Show a notification in the frontend.",
                "fields": {
                    "message": {
                        "description": "Message body of the notification. [Templates accepted]",
                        "example": "Please check your configuration.yaml."
                    },
                    "title": {
                        "description": "Optional title for your notification. [Optional, Templates accepted]",
                        "example": "Test notification"
                    },
                    "notification_id": {
                        "description": "Target ID of the notification, will replace a notification with the same Id. [Optional]",
                        "example": 1234
                    }
                }
            },
            "dismiss": {
                "description": "Remove a notification from the frontend.",
                "fields": {
                    "notification_id": {
                        "description": "Target ID of the notification, which should be removed. [Required]",
                        "example": 1234
                    }
                }
            },
            "mark_read": {
                "description": "Mark a notification read.",
                "fields": {
                    "notification_id": {
                        "description": "Target ID of the notification, which should be mark read. [Required]",
                        "example": 1234
                    }
                }
            }
        },
        "logger": {
            "set_default_level": {
                "description": "Set the default log level for components.",
                "fields": {
                    "level": {
                        "description": "Default severity level. Possible values are debug, info, warn, warning, error, fatal, critical",
                        "example": "debug"
                    }
                }
            },
            "set_level": {
                "description": "Set log level for components.",
                "fields": {
                    "homeassistant.core": {
                        "description": "Example on how to change the logging level for a Home Assistant core components. Possible values are debug, info, warn, warning, error, fatal, critical",
                        "example": "debug"
                    },
                    "homeassistant.components.mqtt": {
                        "description": "Example on how to change the logging level for an Integration. Possible values are debug, info, warn, warning, error, fatal, critical",
                        "example": "warning"
                    },
                    "custom_components.my_integration": {
                        "description": "Example on how to change the logging level for a Custom Integration. Possible values are debug, info, warn, warning, error, fatal, critical",
                        "example": "debug"
                    },
                    "aiohttp": {
                        "description": "Example on how to change the logging level for a Python module. Possible values are debug, info, warn, warning, error, fatal, critical",
                        "example": "error"
                    }
                }
            }
        },
        "system_log": {
            "clear": {
                "description": "Clear all log entries.",
                "fields": {}
            },
            "write": {
                "description": "Write log entry.",
                "fields": {
                    "message": {
                        "description": "Message to log. [Required]",
                        "example": "Something went wrong"
                    },
                    "level": {
                        "description": "Log level: debug, info, warning, error, critical. Defaults to 'error'.",
                        "example": "debug"
                    },
                    "logger": {
                        "description": "Logger name under which to log the message. Defaults to 'system_log.external'.",
                        "example": "mycomponent.myplatform"
                    }
                }
            }
        },
        "recorder": {
            "purge": {
                "description": "Start purge task - delete events and states older than x days, according to keep_days service data.",
                "fields": {
                    "keep_days": {
                        "description": "Number of history days to keep in database after purge. Value >= 0.",
                        "example": 2
                    },
                    "repack": {
                        "description": "Attempt to save disk space by rewriting the entire database file.",
                        "example": true
                    }
                }
            }
        },
        "script": {
            "morning_scene": {
                "description": "",
                "fields": {}
            },
            "day_scene": {
                "description": "",
                "fields": {}
            },
            "evening_scene": {
                "description": "",
                "fields": {}
            },
            "color_scene": {
                "description": "",
                "fields": {}
            },
            "cleaning_scene": {
                "description": "",
                "fields": {}
            },
            "night_scene": {
                "description": "",
                "fields": {}
            },
            "tv_scene": {
                "description": "",
                "fields": {}
            },
            "film_scene": {
                "description": "",
                "fields": {}
            },
            "tv_off_scene": {
                "description": "",
                "fields": {}
            },
            "notify": {
                "description": "",
                "fields": {}
            },
            "notify_greet": {
                "description": "",
                "fields": {}
            },
            "setnightmode": {
                "description": "",
                "fields": {}
            },
            "reload": {
                "description": "Reload all the available scripts",
                "fields": {}
            },
            "turn_on": {
                "description": "Turn on script",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of script to be turned on.",
                        "example": "script.arrive_home"
                    }
                }
            },
            "turn_off": {
                "description": "Turn off script",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of script to be turned off.",
                        "example": "script.arrive_home"
                    }
                }
            },
            "toggle": {
                "description": "Toggle script",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of script to be toggled.",
                        "example": "script.arrive_home"
                    }
                }
            }
        },
        "lovelace": {
            "reload_resources": {
                "description": "Reload Lovelace resources from yaml configuration.",
                "fields": {}
            }
        },
        "netdaemon": {
            "register_service": {
                "description": "Register a new service for netdaemon, used by the daemon and not to be used by users",
                "fields": {
                    "class": {
                        "description": "The class that implements the service call"
                    },
                    "method": {
                        "description": "The method to call"
                    }
                }
            },
            "reload_apps": {
                "description": "",
                "fields": {}
            }
        },
        "google": {
            "found_calendar": {
                "description": "Add calendar if it has not been already discovered.",
                "fields": {}
            },
            "scan_for_calendars": {
                "description": "Scan for new calendars.",
                "fields": {}
            },
            "add_event": {
                "description": "Add a new calendar event.",
                "fields": {
                    "calendar_id": {
                        "description": "The id of the calendar you want.",
                        "example": "Your email"
                    },
                    "summary": {
                        "description": "Acts as the title of the event.",
                        "example": "Bowling"
                    },
                    "description": {
                        "description": "The description of the event. Optional.",
                        "example": "Birthday bowling"
                    },
                    "start_date_time": {
                        "description": "The date and time the event should start.",
                        "example": "2019-03-22 20:00:00"
                    },
                    "end_date_time": {
                        "description": "The date and time the event should end.",
                        "example": "2019-03-22 22:00:00"
                    },
                    "start_date": {
                        "description": "The date the whole day event should start.",
                        "example": "2019-03-10"
                    },
                    "end_date": {
                        "description": "The date the whole day event should end.",
                        "example": "2019-03-11"
                    },
                    "in": {
                        "description": "Days or weeks that you want to create the event in.",
                        "example": "\"days\": 2 or \"weeks\": 2"
                    }
                }
            }
        },
        "scene": {
            "reload": {
                "description": "Reload the scene configuration",
                "fields": {}
            },
            "apply": {
                "description": "Activate a scene. Takes same data as the entities field from a single scene in the config.",
                "fields": {
                    "entities": {
                        "description": "The entities and the state that they need to be.",
                        "example": {
                            "light.kitchen": "on",
                            "light.ceiling": {
                                "state": "on",
                                "brightness": 80
                            }
                        }
                    }
                }
            },
            "create": {
                "description": "Creates a new scene.",
                "fields": {
                    "scene_id": {
                        "description": "The entity_id of the new scene.",
                        "example": "all_lights"
                    },
                    "entities": {
                        "description": "The entities to control with the scene.",
                        "example": {
                            "light.tv_back_light": "on",
                            "light.ceiling": {
                                "state": "on",
                                "brightness": 200
                            }
                        }
                    },
                    "snapshot_entities": {
                        "description": "The entities of which a snapshot is to be taken",
                        "example": [
                            "light.ceiling",
                            "light.kitchen"
                        ]
                    }
                }
            },
            "turn_on": {
                "description": "Activate a scene.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of scenes to turn on",
                        "example": "scene.romantic"
                    }
                }
            }
        },
        "conversation": {
            "process": {
                "description": "Launch a conversation from a transcribed text.",
                "fields": {
                    "text": {
                        "description": "Transcribed text",
                        "example": "Turn all lights on"
                    }
                }
            }
        },
        "ffmpeg": {
            "start": {
                "description": "Send a start command to a ffmpeg based sensor.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities that will start. Platform dependent.",
                        "example": "binary_sensor.ffmpeg_noise"
                    }
                }
            },
            "stop": {
                "description": "Send a stop command to a ffmpeg based sensor.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities that will stop. Platform dependent.",
                        "example": "binary_sensor.ffmpeg_noise"
                    }
                }
            },
            "restart": {
                "description": "Send a restart command to a ffmpeg based sensor.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities that will restart. Platform dependent.",
                        "example": "binary_sensor.ffmpeg_noise"
                    }
                }
            }
        },
        "zone": {
            "reload": {
                "description": "Reload the YAML-based zone configuration.",
                "fields": {}
            }
        },
        "input_number": {
            "reload": {
                "description": "Reload the input_number configuration.",
                "fields": {}
            },
            "set_value": {
                "description": "Set the value of an input number entity.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id of the input number to set the new value.",
                        "example": "input_number.threshold"
                    },
                    "value": {
                        "description": "The target value the entity should be set to.",
                        "example": 42
                    }
                }
            },
            "increment": {
                "description": "Increment the value of an input number entity by its stepping.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id of the input number the should be incremented.",
                        "example": "input_number.threshold"
                    }
                }
            },
            "decrement": {
                "description": "Decrement the value of an input number entity by its stepping.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id of the input number the should be decremented.",
                        "example": "input_number.threshold"
                    }
                }
            }
        },
        "input_select": {
            "reload": {
                "description": "Reload the input_select configuration.",
                "fields": {}
            },
            "select_option": {
                "description": "Select an option of an input select entity.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id of the input select to select the value.",
                        "example": "input_select.my_select"
                    },
                    "option": {
                        "description": "Option to be selected.",
                        "example": "\"Item A\""
                    }
                }
            },
            "select_next": {
                "description": "Select the next options of an input select entity.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id of the input select to select the next value for.",
                        "example": "input_select.my_select"
                    }
                }
            },
            "select_previous": {
                "description": "Select the previous options of an input select entity.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id of the input select to select the previous value for.",
                        "example": "input_select.my_select"
                    }
                }
            },
            "set_options": {
                "description": "Set the options of an input select entity.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id of the input select to set the new options for.",
                        "example": "input_select.my_select"
                    },
                    "options": {
                        "description": "Options for the input select entity.",
                        "example": "[\"Item A\", \"Item B\", \"Item C\"]"
                    }
                }
            }
        },
        "input_boolean": {
            "reload": {
                "description": "Reload the input_boolean configuration.",
                "fields": {}
            },
            "turn_on": {
                "description": "Turns on an input boolean.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id of the input boolean to turn on.",
                        "example": "input_boolean.notify_alerts"
                    }
                }
            },
            "turn_off": {
                "description": "Turns off an input boolean",
                "fields": {
                    "entity_id": {
                        "description": "Entity id of the input boolean to turn off.",
                        "example": "input_boolean.notify_alerts"
                    }
                }
            },
            "toggle": {
                "description": "Toggles an input boolean.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id of the input boolean to toggle.",
                        "example": "input_boolean.notify_alerts"
                    }
                }
            }
        },
        "person": {
            "reload": {
                "description": "Reload the person configuration.",
                "fields": {}
            }
        },
        "group": {
            "reload": {
                "description": "Reload group configuration.",
                "fields": {}
            },
            "set": {
                "description": "Create/Update a user group.",
                "fields": {
                    "object_id": {
                        "description": "Group id and part of entity id.",
                        "example": "test_group"
                    },
                    "name": {
                        "description": "Name of group",
                        "example": "My test group"
                    },
                    "icon": {
                        "description": "Name of icon for the group.",
                        "example": "mdi:camera"
                    },
                    "entities": {
                        "description": "List of all members in the group. Not compatible with 'delta'.",
                        "example": "domain.entity_id1, domain.entity_id2"
                    },
                    "add_entities": {
                        "description": "List of members they will change on group listening.",
                        "example": "domain.entity_id1, domain.entity_id2"
                    },
                    "all": {
                        "description": "Enable this option if the group should only turn on when all entities are on.",
                        "example": true
                    }
                }
            },
            "remove": {
                "description": "Remove a user group.",
                "fields": {
                    "object_id": {
                        "description": "Group id and part of entity id.",
                        "example": "test_group"
                    }
                }
            }
        },
        "stream": {
            "record": {
                "description": "Make a .mp4 recording from a provided stream.",
                "fields": {
                    "stream_source": {
                        "description": "The input source for the stream.",
                        "example": "rtsp://my.stream.feed:554"
                    },
                    "filename": {
                        "description": "The file name string.",
                        "example": "/tmp/my_stream.mp4"
                    },
                    "duration": {
                        "description": "Target recording length (in seconds). Default: 30",
                        "example": 30
                    },
                    "lookback": {
                        "description": "Target lookback period (in seconds) to include in addition to duration. Only available if there is currently an active HLS stream for stream_source. Default: 0",
                        "example": 5
                    }
                }
            }
        },
        "deconz": {
            "configure": {
                "description": "Set attribute of device in deCONZ. See https://home-assistant.io/integrations/deconz/#device-services for details.",
                "fields": {
                    "entity": {
                        "description": "Entity id representing a specific device in deCONZ.",
                        "example": "light.rgb_light"
                    },
                    "field": {
                        "description": "Field is a string representing a full path to deCONZ endpoint (when entity is not specified) or a subpath of the device path for the entity (when entity is specified).",
                        "example": "\"/lights/1/state\" or \"/state\""
                    },
                    "data": {
                        "description": "Data is a json object with what data you want to alter.",
                        "example": "{\"on\": true}"
                    },
                    "bridgeid": {
                        "description": "(Optional) Bridgeid is a string unique for each deCONZ hardware. It can be found as part of the integration name.",
                        "example": "00212EFFFF012345"
                    }
                }
            },
            "device_refresh": {
                "description": "Refresh device lists from deCONZ.",
                "fields": {
                    "bridgeid": {
                        "description": "(Optional) Bridgeid is a string unique for each deCONZ hardware. It can be found as part of the integration name.",
                        "example": "00212EFFFF012345"
                    }
                }
            }
        },
        "kodi": {
            "add_to_playlist": {
                "description": "Add music to the default playlist (i.e. playlistid=0).",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the Kodi entities where to add the media.",
                        "example": "media_player.living_room_kodi"
                    },
                    "media_type": {
                        "description": "Media type identifier. It must be one of SONG or ALBUM.",
                        "example": "ALBUM"
                    },
                    "media_id": {
                        "description": "Unique Id of the media entry to add (`songid` or albumid`). If not defined, `media_name` and `artist_name` are needed to search the Kodi music library.",
                        "example": 123456
                    },
                    "media_name": {
                        "description": "Optional media name for filtering media. Can be 'ALL' when `media_type` is 'ALBUM' and `artist_name` is specified, to add all songs from one artist.",
                        "example": "Highway to Hell"
                    },
                    "artist_name": {
                        "description": "Optional artist name for filtering media.",
                        "example": "AC/DC"
                    }
                }
            },
            "call_method": {
                "description": "Call a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the Kodi entities where to run the API method.",
                        "example": "media_player.living_room_kodi"
                    },
                    "method": {
                        "description": "Name of the Kodi JSONRPC API method to be called.",
                        "example": "VideoLibrary.GetRecentlyAddedEpisodes"
                    }
                }
            }
        },
        "climate": {
            "turn_on": {
                "description": "Turn climate device on.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change.",
                        "example": "climate.kitchen"
                    }
                }
            },
            "turn_off": {
                "description": "Turn climate device off.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change.",
                        "example": "climate.kitchen"
                    }
                }
            },
            "set_hvac_mode": {
                "description": "Set HVAC operation mode for climate device.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change.",
                        "example": "climate.nest"
                    },
                    "hvac_mode": {
                        "description": "New value of operation mode.",
                        "example": "heat"
                    }
                }
            },
            "set_preset_mode": {
                "description": "Set preset mode for climate device.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change.",
                        "example": "climate.kitchen"
                    },
                    "preset_mode": {
                        "description": "New value of preset mode",
                        "example": "away"
                    }
                }
            },
            "set_aux_heat": {
                "description": "Turn auxiliary heater on/off for climate device.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change.",
                        "example": "climate.kitchen"
                    },
                    "aux_heat": {
                        "description": "New value of axillary heater.",
                        "example": true
                    }
                }
            },
            "set_temperature": {
                "description": "Set target temperature of climate device.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change.",
                        "example": "climate.kitchen"
                    },
                    "temperature": {
                        "description": "New target temperature for HVAC.",
                        "example": 25
                    },
                    "target_temp_high": {
                        "description": "New target high temperature for HVAC.",
                        "example": 26
                    },
                    "target_temp_low": {
                        "description": "New target low temperature for HVAC.",
                        "example": 20
                    },
                    "hvac_mode": {
                        "description": "HVAC operation mode to set temperature to.",
                        "example": "heat"
                    }
                }
            },
            "set_humidity": {
                "description": "Set target humidity of climate device.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change.",
                        "example": "climate.kitchen"
                    },
                    "humidity": {
                        "description": "New target humidity for climate device.",
                        "example": 60
                    }
                }
            },
            "set_fan_mode": {
                "description": "Set fan operation for climate device.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change.",
                        "example": "climate.nest"
                    },
                    "fan_mode": {
                        "description": "New value of fan mode.",
                        "example": "On Low"
                    }
                }
            },
            "set_swing_mode": {
                "description": "Set swing operation for climate device.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change.",
                        "example": "climate.nest"
                    },
                    "swing_mode": {
                        "description": "New value of swing mode."
                    }
                }
            }
        },
        "amcrest": {
            "enable_recording": {
                "description": "Enable continuous recording to camera storage.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the cameras, or 'all' for all cameras.",
                        "example": "camera.house_front"
                    }
                }
            },
            "disable_recording": {
                "description": "Disable continuous recording to camera storage.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the cameras, or 'all' for all cameras.",
                        "example": "camera.house_front"
                    }
                }
            },
            "enable_audio": {
                "description": "Enable audio stream.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the cameras, or 'all' for all cameras.",
                        "example": "camera.house_front"
                    }
                }
            },
            "disable_audio": {
                "description": "Disable audio stream.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the cameras, or 'all' for all cameras.",
                        "example": "camera.house_front"
                    }
                }
            },
            "enable_motion_recording": {
                "description": "Enable recording a clip to camera storage when motion is detected.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the cameras, or 'all' for all cameras.",
                        "example": "camera.house_front"
                    }
                }
            },
            "disable_motion_recording": {
                "description": "Disable recording a clip to camera storage when motion is detected.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the cameras, or 'all' for all cameras.",
                        "example": "camera.house_front"
                    }
                }
            },
            "goto_preset": {
                "description": "Move camera to PTZ preset.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the cameras, or 'all' for all cameras.",
                        "example": "camera.house_front"
                    },
                    "preset": {
                        "description": "Preset number, starting from 1.",
                        "example": 1
                    }
                }
            },
            "set_color_bw": {
                "description": "Set camera color mode.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the cameras, or 'all' for all cameras.",
                        "example": "camera.house_front"
                    },
                    "color_bw": {
                        "description": "Color mode, one of 'auto', 'color' or 'bw'.",
                        "example": "auto"
                    }
                }
            },
            "start_tour": {
                "description": "Start camera's PTZ tour function.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the cameras, or 'all' for all cameras.",
                        "example": "camera.house_front"
                    }
                }
            },
            "stop_tour": {
                "description": "Stop camera's PTZ tour function.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of the cameras, or 'all' for all cameras.",
                        "example": "camera.house_front"
                    }
                }
            }
        },
        "cover": {
            "open_cover": {
                "description": "Open all or specified cover.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of cover(s) to open.",
                        "example": "cover.living_room"
                    }
                }
            },
            "close_cover": {
                "description": "Close all or specified cover.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of cover(s) to close.",
                        "example": "cover.living_room"
                    }
                }
            },
            "set_cover_position": {
                "description": "Move to specific position all or specified cover.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of cover(s) to set cover position.",
                        "example": "cover.living_room"
                    },
                    "position": {
                        "description": "Position of the cover (0 to 100).",
                        "example": 30
                    }
                }
            },
            "stop_cover": {
                "description": "Stop all or specified cover.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of cover(s) to stop.",
                        "example": "cover.living_room"
                    }
                }
            },
            "toggle": {
                "description": "Toggles a cover open/closed.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of cover(s) to toggle.",
                        "example": "cover.garage_door"
                    }
                }
            },
            "open_cover_tilt": {
                "description": "Open all or specified cover tilt.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of cover(s) tilt to open.",
                        "example": "cover.living_room_blinds"
                    }
                }
            },
            "close_cover_tilt": {
                "description": "Close all or specified cover tilt.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of cover(s) to close tilt.",
                        "example": "cover.living_room_blinds"
                    }
                }
            },
            "stop_cover_tilt": {
                "description": "Stop all or specified cover.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of cover(s) to stop.",
                        "example": "cover.living_room_blinds"
                    }
                }
            },
            "set_cover_tilt_position": {
                "description": "Move to specific position all or specified cover tilt.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of cover(s) to set cover tilt position.",
                        "example": "cover.living_room_blinds"
                    },
                    "tilt_position": {
                        "description": "Tilt position of the cover (0 to 100).",
                        "example": 30
                    }
                }
            },
            "toggle_cover_tilt": {
                "description": "Toggles a cover tilt open/closed.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of cover(s) to toggle tilt.",
                        "example": "cover.living_room_blinds"
                    }
                }
            }
        },
        "frontend": {
            "set_theme": {
                "description": "Set a theme unless the client selected per-device theme.",
                "fields": {
                    "name": {
                        "description": "Name of a predefined theme or 'default'.",
                        "example": "light"
                    }
                }
            },
            "reload_themes": {
                "description": "Reload themes from yaml configuration.",
                "fields": {}
            }
        },
        "notify": {
            "hass_discord": {
                "description": "",
                "fields": {}
            },
            "th": {
                "description": "",
                "fields": {}
            },
            "mobile_app_tomas_ipad": {
                "description": "",
                "fields": {}
            },
            "mobile_app_sm_g975f": {
                "description": "",
                "fields": {}
            },
            "notify": {
                "description": "Send a notification.",
                "fields": {
                    "message": {
                        "description": "Message body of the notification.",
                        "example": "The garage door has been open for 10 minutes."
                    },
                    "title": {
                        "description": "Optional title for your notification.",
                        "example": "Your Garage Door Friend"
                    },
                    "target": {
                        "description": "An array of targets to send the notification to. Optional depending on the platform.",
                        "example": "platform specific"
                    },
                    "data": {
                        "description": "Extended information for notification. Optional depending on the platform.",
                        "example": "platform specific"
                    }
                }
            }
        },
        "switch": {
            "turn_off": {
                "description": "Turn a switch off.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn off.",
                        "example": "switch.living_room"
                    }
                }
            },
            "turn_on": {
                "description": "Turn a switch on.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn on",
                        "example": "switch.living_room"
                    }
                }
            },
            "toggle": {
                "description": "Toggles a switch state.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to toggle.",
                        "example": "switch.living_room"
                    }
                }
            }
        },
        "light": {
            "turn_on": {
                "description": "Turn a light on.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn on",
                        "example": "light.kitchen"
                    },
                    "transition": {
                        "description": "Duration in seconds it takes to get to next state",
                        "example": 60
                    },
                    "rgb_color": {
                        "description": "Color for the light in RGB-format.",
                        "example": "[255, 100, 100]"
                    },
                    "color_name": {
                        "description": "A human readable color name.",
                        "example": "red"
                    },
                    "hs_color": {
                        "description": "Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100.",
                        "example": "[300, 70]"
                    },
                    "xy_color": {
                        "description": "Color for the light in XY-format.",
                        "example": "[0.52, 0.43]"
                    },
                    "color_temp": {
                        "description": "Color temperature for the light in mireds.",
                        "example": 250
                    },
                    "kelvin": {
                        "description": "Color temperature for the light in Kelvin.",
                        "example": 4000
                    },
                    "white_value": {
                        "description": "Number between 0..255 indicating level of white.",
                        "example": "250"
                    },
                    "brightness": {
                        "description": "Number between 0..255 indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.",
                        "example": 120
                    },
                    "brightness_pct": {
                        "description": "Number between 0..100 indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.",
                        "example": 47
                    },
                    "brightness_step": {
                        "description": "Change brightness by an amount. Should be between -255..255.",
                        "example": -25.5
                    },
                    "brightness_step_pct": {
                        "description": "Change brightness by a percentage. Should be between -100..100.",
                        "example": -10
                    },
                    "profile": {
                        "description": "Name of a light profile to use.",
                        "example": "relax"
                    },
                    "flash": {
                        "description": "If the light should flash. Valid values are short and long.",
                        "example": "short",
                        "values": [
                            "short",
                            "long"
                        ]
                    },
                    "effect": {
                        "description": "Light effect.",
                        "example": "random",
                        "values": [
                            "colorloop",
                            "random"
                        ]
                    }
                }
            },
            "turn_off": {
                "description": "Turn a light off.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn off.",
                        "example": "light.kitchen"
                    },
                    "transition": {
                        "description": "Duration in seconds it takes to get to next state.",
                        "example": 60
                    },
                    "flash": {
                        "description": "If the light should flash. Valid values are short and long.",
                        "example": "short",
                        "values": [
                            "short",
                            "long"
                        ]
                    }
                }
            },
            "toggle": {
                "description": "Toggles a light.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn on",
                        "example": "light.kitchen"
                    },
                    "transition": {
                        "description": "Duration in seconds it takes to get to next state",
                        "example": 60
                    },
                    "rgb_color": {
                        "description": "Color for the light in RGB-format.",
                        "example": "[255, 100, 100]"
                    },
                    "color_name": {
                        "description": "A human readable color name.",
                        "example": "red"
                    },
                    "hs_color": {
                        "description": "Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100.",
                        "example": "[300, 70]"
                    },
                    "xy_color": {
                        "description": "Color for the light in XY-format.",
                        "example": "[0.52, 0.43]"
                    },
                    "color_temp": {
                        "description": "Color temperature for the light in mireds.",
                        "example": 250
                    },
                    "kelvin": {
                        "description": "Color temperature for the light in Kelvin.",
                        "example": 4000
                    },
                    "white_value": {
                        "description": "Number between 0..255 indicating level of white.",
                        "example": "250"
                    },
                    "brightness": {
                        "description": "Number between 0..255 indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.",
                        "example": 120
                    },
                    "brightness_pct": {
                        "description": "Number between 0..100 indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.",
                        "example": 47
                    },
                    "profile": {
                        "description": "Name of a light profile to use.",
                        "example": "relax"
                    },
                    "flash": {
                        "description": "If the light should flash. Valid values are short and long.",
                        "example": "short",
                        "values": [
                            "short",
                            "long"
                        ]
                    },
                    "effect": {
                        "description": "Light effect.",
                        "example": "random",
                        "values": [
                            "colorloop",
                            "random"
                        ]
                    }
                }
            }
        },
        "camera": {
            "enable_motion_detection": {
                "description": "Enable the motion detection in a camera.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to enable motion detection.",
                        "example": "camera.living_room_camera"
                    }
                }
            },
            "disable_motion_detection": {
                "description": "Disable the motion detection in a camera.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to disable motion detection.",
                        "example": "camera.living_room_camera"
                    }
                }
            },
            "turn_off": {
                "description": "Turn off camera.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id.",
                        "example": "camera.living_room"
                    }
                }
            },
            "turn_on": {
                "description": "Turn on camera.",
                "fields": {
                    "entity_id": {
                        "description": "Entity id.",
                        "example": "camera.living_room"
                    }
                }
            },
            "snapshot": {
                "description": "Take a snapshot from a camera.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to create snapshots from.",
                        "example": "camera.living_room_camera"
                    },
                    "filename": {
                        "description": "Template of a Filename. Variable is entity_id.",
                        "example": "/tmp/snapshot_{{ entity_id }}"
                    }
                }
            },
            "play_stream": {
                "description": "Play camera stream on supported media player.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to stream from.",
                        "example": "camera.living_room_camera"
                    },
                    "media_player": {
                        "description": "Name(s) of media player to stream to.",
                        "example": "media_player.living_room_tv"
                    },
                    "format": {
                        "description": "(Optional) Stream format supported by media player.",
                        "example": "hls"
                    }
                }
            },
            "record": {
                "description": "Record live camera feed.",
                "fields": {
                    "entity_id": {
                        "description": "Name of entities to record.",
                        "example": "camera.living_room_camera"
                    },
                    "filename": {
                        "description": "Template of a Filename. Variable is entity_id.  Must be mp4.",
                        "example": "/tmp/snapshot_{{ entity_id }}.mp4"
                    },
                    "duration": {
                        "description": "(Optional) Target recording length (in seconds).",
                        "default": 30,
                        "example": 30
                    },
                    "lookback": {
                        "description": "(Optional) Target lookback period (in seconds) to include in addition to duration.  Only available if there is currently an active HLS stream.",
                        "example": 4
                    }
                }
            }
        },
        "harmony": {
            "sync": {
                "description": "Syncs the remote's configuration.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to sync.",
                        "example": "remote.family_room"
                    }
                }
            },
            "change_channel": {
                "description": "Sends change channel command to the Harmony HUB",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of Harmony remote entities to send change channel command to",
                        "example": "remote.family_room"
                    },
                    "channel": {
                        "description": "Channel number to change to",
                        "example": "200"
                    }
                }
            }
        },
        "remote": {
            "turn_off": {
                "description": "Sends the Power Off Command.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn off.",
                        "example": "remote.family_room"
                    }
                }
            },
            "turn_on": {
                "description": "Sends the Power On Command.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn on.",
                        "example": "remote.family_room"
                    },
                    "activity": {
                        "description": "Activity ID or Activity Name to start.",
                        "example": "BedroomTV"
                    }
                }
            },
            "toggle": {
                "description": "Toggles a device.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to toggle.",
                        "example": "remote.family_room"
                    }
                }
            },
            "send_command": {
                "description": "Sends a command or a list of commands to a device.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to send command from.",
                        "example": "remote.family_room"
                    },
                    "device": {
                        "description": "Device ID to send command to.",
                        "example": "32756745"
                    },
                    "command": {
                        "description": "A single command or a list of commands to send.",
                        "example": "Play"
                    },
                    "num_repeats": {
                        "description": "An optional value that specifies the number of times you want to repeat the command(s). If not specified, the command(s) will not be repeated.",
                        "example": "5"
                    },
                    "delay_secs": {
                        "description": "An optional value that specifies that number of seconds you want to wait in between repeated commands. If not specified, the default of 0.4 seconds will be used.",
                        "example": "0.75"
                    },
                    "hold_secs": {
                        "description": "An optional value that specifies that number of seconds you want to have it held before the release is send. If not specified, the release will be send immediately after the press.",
                        "example": "2.5"
                    }
                }
            },
            "learn_command": {
                "description": "Learns a command or a list of commands from a device.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to learn command from.",
                        "example": "remote.bedroom"
                    },
                    "device": {
                        "description": "Device ID to learn command from.",
                        "example": "television"
                    },
                    "command": {
                        "description": "A single command or a list of commands to learn.",
                        "example": "Turn on"
                    },
                    "alternative": {
                        "description": "If code must be stored as alternative (useful for discrete remotes).",
                        "example": "True"
                    },
                    "timeout": {
                        "description": "Timeout, in seconds, for the command to be learned.",
                        "example": "30"
                    }
                }
            }
        },
        "device_tracker": {
            "see": {
                "description": "Control tracked device.",
                "fields": {
                    "mac": {
                        "description": "MAC address of device",
                        "example": "FF:FF:FF:FF:FF:FF"
                    },
                    "dev_id": {
                        "description": "Id of device (find id in known_devices.yaml).",
                        "example": "phonedave"
                    },
                    "host_name": {
                        "description": "Hostname of device",
                        "example": "Dave"
                    },
                    "location_name": {
                        "description": "Name of location where device is located (not_home is away).",
                        "example": "home"
                    },
                    "gps": {
                        "description": "GPS coordinates where device is located (latitude, longitude).",
                        "example": "[51.509802, -0.086692]"
                    },
                    "gps_accuracy": {
                        "description": "Accuracy of GPS coordinates.",
                        "example": "80"
                    },
                    "battery": {
                        "description": "Battery level of device.",
                        "example": "100"
                    }
                }
            }
        },
        "media_player": {
            "turn_on": {
                "description": "Turn a media player power on.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn on.",
                        "example": "media_player.living_room_chromecast"
                    }
                }
            },
            "turn_off": {
                "description": "Turn a media player power off.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn off.",
                        "example": "media_player.living_room_chromecast"
                    }
                }
            },
            "toggle": {
                "description": "Toggles a media player power state.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to toggle.",
                        "example": "media_player.living_room_chromecast"
                    }
                }
            },
            "volume_up": {
                "description": "Turn a media player volume up.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn volume up on.",
                        "example": "media_player.living_room_sonos"
                    }
                }
            },
            "volume_down": {
                "description": "Turn a media player volume down.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to turn volume down on.",
                        "example": "media_player.living_room_sonos"
                    }
                }
            },
            "media_play_pause": {
                "description": "Toggle media player play/pause state.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to toggle play/pause state on.",
                        "example": "media_player.living_room_sonos"
                    }
                }
            },
            "media_play": {
                "description": "Send the media player the command for play.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to play on.",
                        "example": "media_player.living_room_sonos"
                    }
                }
            },
            "media_pause": {
                "description": "Send the media player the command for pause.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to pause on.",
                        "example": "media_player.living_room_sonos"
                    }
                }
            },
            "media_stop": {
                "description": "Send the media player the stop command.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to stop on.",
                        "example": "media_player.living_room_sonos"
                    }
                }
            },
            "media_next_track": {
                "description": "Send the media player the command for next track.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to send next track command to.",
                        "example": "media_player.living_room_sonos"
                    }
                }
            },
            "media_previous_track": {
                "description": "Send the media player the command for previous track.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to send previous track command to.",
                        "example": "media_player.living_room_sonos"
                    }
                }
            },
            "clear_playlist": {
                "description": "Send the media player the command to clear players playlist.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change source on.",
                        "example": "media_player.living_room_chromecast"
                    }
                }
            },
            "volume_set": {
                "description": "Set a media player's volume level.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to set volume level on.",
                        "example": "media_player.living_room_sonos"
                    },
                    "volume_level": {
                        "description": "Volume level to set as float.",
                        "example": 0.6
                    }
                }
            },
            "volume_mute": {
                "description": "Mute a media player's volume.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to mute.",
                        "example": "media_player.living_room_sonos"
                    },
                    "is_volume_muted": {
                        "description": "True/false for mute/unmute.",
                        "example": true
                    }
                }
            },
            "media_seek": {
                "description": "Send the media player the command to seek in current playing media.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to seek media on.",
                        "example": "media_player.living_room_chromecast"
                    },
                    "seek_position": {
                        "description": "Position to seek to. The format is platform dependent.",
                        "example": 100
                    }
                }
            },
            "select_source": {
                "description": "Send the media player the command to change input source.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change source on.",
                        "example": "media_player.txnr535_0009b0d81f82"
                    },
                    "source": {
                        "description": "Name of the source to switch to. Platform dependent.",
                        "example": "video1"
                    }
                }
            },
            "select_sound_mode": {
                "description": "Send the media player the command to change sound mode.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to change sound mode on.",
                        "example": "media_player.marantz"
                    },
                    "sound_mode": {
                        "description": "Name of the sound mode to switch to.",
                        "example": "Music"
                    }
                }
            },
            "play_media": {
                "description": "Send the media player the command for playing media.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to seek media on",
                        "example": "media_player.living_room_chromecast"
                    },
                    "media_content_id": {
                        "description": "The ID of the content to play. Platform dependent.",
                        "example": "https://home-assistant.io/images/cast/splash.png"
                    },
                    "media_content_type": {
                        "description": "The type of the content to play. Must be one of image, music, tvshow, video, episode, channel or playlist",
                        "example": "music"
                    }
                }
            },
            "shuffle_set": {
                "description": "Set shuffling state.",
                "fields": {
                    "entity_id": {
                        "description": "Name(s) of entities to set.",
                        "example": "media_player.spotify"
                    },
                    "shuffle": {
                        "description": "True/false for enabling/disabling shuffle.",
                        "example": true
                    }
                }
            }
        },
        "automation": {
            "trigger": {
                "description": "Trigger the action of an automation.",
                "fields": {
                    "entity_id": {
                        "description": "Name of the automation to trigger.",
                        "example": "automation.notify_home"
                    },
                    "skip_condition": {
                        "description": "Whether or not the condition will be skipped (defaults to True).",
                        "example": true
                    }
                }
            },
            "toggle": {
                "description": "Toggle an automation.",
                "fields": {
                    "entity_id": {
                        "description": "Name of the automation to toggle on/off.",
                        "example": "automation.notify_home"
                    }
                }
            },
            "turn_on": {
                "description": "Enable an automation.",
                "fields": {
                    "entity_id": {
                        "description": "Name of the automation to turn on.",
                        "example": "automation.notify_home"
                    }
                }
            },
            "turn_off": {
                "description": "Disable an automation.",
                "fields": {
                    "entity_id": {
                        "description": "Name of the automation to turn off.",
                        "example": "automation.notify_home"
                    }
                }
            },
            "reload": {
                "description": "Reload the automation configuration.",
                "fields": {}
            }
        },
        "tts": {
            "google_cloud_say": {
                "description": "",
                "fields": {}
            },
            "clear_cache": {
                "description": "Remove cache files and RAM cache.",
                "fields": {}
            }
        },
        "logbook": {
            "log": {
                "description": "Create a custom entry in your logbook.",
                "fields": {
                    "name": {
                        "description": "Custom name for an entity, can be referenced with entity_id",
                        "example": "Kitchen"
                    },
                    "message": {
                        "description": "Message of the custom logbook entry",
                        "example": "is being used"
                    },
                    "entity_id": {
                        "description": "Entity to reference in custom logbook entry [Optional]",
                        "example": "light.kitchen"
                    },
                    "domain": {
                        "description": "Icon of domain to display in custom logbook entry [Optional]",
                        "example": "light"
                    }
                }
            }
        },
        "cast": {
            "show_lovelace_view": {
                "description": "Show a Lovelace view on a Chromecast.",
                "fields": {
                    "entity_id": {
                        "description": "Media Player entity to show the Lovelace view on.",
                        "example": "media_player.kitchen"
                    },
                    "view_path": {
                        "description": "The path of the Lovelace view to show.",
                        "example": "downstairs"
                    }
                }
            }
        },
        "hassio": {
            "addon_start": {
                "description": "Start a Hass.io docker add-on.",
                "fields": {
                    "addon": {
                        "description": "The add-on slug.",
                        "example": "core_ssh"
                    }
                }
            },
            "addon_stop": {
                "description": "Stop a Hass.io docker add-on.",
                "fields": {
                    "addon": {
                        "description": "The add-on slug.",
                        "example": "core_ssh"
                    }
                }
            },
            "addon_restart": {
                "description": "Restart a Hass.io docker add-on.",
                "fields": {
                    "addon": {
                        "description": "The add-on slug.",
                        "example": "core_ssh"
                    }
                }
            },
            "addon_stdin": {
                "description": "Write data to a Hass.io docker add-on stdin .",
                "fields": {
                    "addon": {
                        "description": "The add-on slug.",
                        "example": "core_ssh"
                    }
                }
            },
            "host_shutdown": {
                "description": "Poweroff the host system.",
                "fields": {}
            },
            "host_reboot": {
                "description": "Reboot the host system.",
                "fields": {}
            },
            "snapshot_full": {
                "description": "",
                "fields": {}
            },
            "snapshot_partial": {
                "description": "",
                "fields": {}
            },
            "restore_full": {
                "description": "",
                "fields": {}
            },
            "restore_partial": {
                "description": "",
                "fields": {}
            }
        }
    }
}